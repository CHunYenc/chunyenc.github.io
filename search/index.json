[{"content":"前言 這篇的產出主要是因為我自己在使用 Railway.app (Paas 平台) 的時候，發現沒有辦法看到 Gunicorn 的 Console Log \u0026hellip; 如果系統有問題，我根本不知道發生了什麼事情。\n因為筆者過去都使用 Docker Compose + Gunicorn 或是有需要就接到 Nginx (or Apache) 的架構，所以都是直接看 Log。\n甚至 Gunicorn 也可以設定輸出到檔案，然後透過 tail -f 來觀看。\n但是本次是在 Railway.app 上，所以就有這篇的產出。\n最終設定 在 Railway.app 上，我們可以透過設定 Custom Start Command 來達到我們的目的。\n1 gunicorn --access-logfile \u0026#39;-\u0026#39; --error-logfile \u0026#39;-\u0026#39; app:app 這樣就可以把 Console Log 輸出到標準輸出 (stdout) 了。\n結論 其實非常簡單, 但是我花了一些時間才找到這個設定。\n而且現在大家都靠 GPT-3 了，所以我也不知道這篇文章有沒有人會看到 XDDD\n希望這篇對你有幫助。\n","date":"2024-02-10T00:20:00+08:00","permalink":"/p/gunicorn-output-console-log/","title":"Gunicorn - 輸出 Console Log, 在 Railway."},{"content":"詳細問題 分享的電腦為 Win11 連線的辦公室電腦有 Win7, Win10 連線共享印表機時, 出現 0x00000709 錯誤 使用過 共用印表機救星 也無法解決 其他台 Win7 可以正常連線 簡單來說就是這台電腦無法連線到共享印表機, 但是其他電腦都可以。\n解決方法 因為 Win7 現在的版本也不會再更新了, 所以就乾脆把它升級到 Win7 最後一個版本了。\n所以使用 UpdatePackage7R2 這個工具, 來升級 Win7 到最後一個版本。\nUpdatePack7R2 更新完就可以了, 很莫名其妙 ..\n但可以成功的方案就是推, 你可以試試看 !\n參考資料 UpdatePack7R2 2022，Windows 7 更新包 萬里資訊 - 解決辦法-無法使用共用印表機0x0000011b與0x00000709等錯誤 ","date":"2024-01-27T17:00:00+08:00","permalink":"/p/win7-error-0x00000709/","title":"Win7 - 連線共享印表機時, 出現 0x00000709 錯誤"},{"content":"前言 公司官網使用 Laravel v5.1.x, 有一個功能是要讓使用者可以下載 PDF 檔案，但是原本的寫法是使用 response()-\u0026gt;download()，但是這樣會導致使用者下載後還要再去開啟 PDF 檔案，所以要改成直接開啟 PDF 檔案。\n但是我一開始發現 laravel v10.x, 有 response()-\u0026gt;file() 可以使用，但是 laravel v5.x 沒有，所以要另外找方法。\n流程 簡單來說操作流程如下, 因為主要在改善使用者瀏覽 PDF 或下載檔案的流程。\n改善前 flowchart LR step1[\"點擊下載按鈕\"] step2[\"等待下載 PDF 檔案 (瀏覽器跳出下載視窗)\"] step3[\"開啟 PDF 檔案 (使用者自行開啟)\"] step1 --\u003e step2 --\u003e step3 可以發現說, 使用者需要等待下載 PDF 檔案, 然後再去開啟(手動) PDF 檔案。\n改善後 flowchart LR step1[\"點擊下載按鈕\"] step2[\"等待開啟 PDF 檔案 (瀏覽器直接開啟 PDF 檔案)\"] step1 --\u003e step2 這樣中間就會少一個步驟, 讓使用者可以直接開啟 PDF 檔案。\n更改程式碼前 因為公司是使用 Laravel v5.1.x, 所以我們要去找到原本的程式碼在哪裡。\n1 2 3 4 5 6 7 8 # download.blade.php \u0026lt;td\u0026gt; @if(!empty($value2[\u0026#39;file\u0026#39;])) \u0026lt;a href=\u0026#34;{{ xx::url(\u0026#39;download/\u0026#39;.$value2[\u0026#39;id\u0026#39;].\u0026#39;?time=\u0026#39;.time())}}\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;../../assets/images/icons/icon-pdf.png\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;icon-pdf\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; @endif \u0026lt;/td\u0026gt; 從上面的 HTML 可以知道, 下載的路徑是 download/{id}。\n然後還有搭配一個 Icon, 這邊就不多做介紹。\n1 2 3 4 .... # download/{id} return response()-\u0026gt;download($file_path, $file_name); .... 這邊就是原本的下載 PDF 檔案的程式碼, 這邊就是會直接透過瀏覽器下載 PDF 檔案。\n有趣的事情 因為透過 PDF 直接打開後，會發現到每次開啟檔案都不是 PDF 檔名了。而是 PDF 文件標題，而公司文件的標題非常的亂 \u0026hellip; 甚至還有一些奇怪的符號、COPY 其他公司的文件來改的 .. 所以後面我又寫了一隻 Python 程式來幫我把全部 PDF 檔案的標題改掉。\n至於 PHP 能不能夠改 PDF 的檔案標題，我沒有找到方法，所以就用 Python 來做了。\n如果你是用 PHP 的話，也歡迎你跟我說你用什麼套件來改 PDF 檔案標題。\n","date":"2023-11-03T18:50:00Z","permalink":"/p/laravelv05-change-response-download/","title":"Laravel(v5) - 更改 Response Download PDF 到直接打開 PDF"},{"content":"前言 近期換了工作，而這份工作是使用原生 PHP。有預計會升級為 Laravel。\n那在安裝 PHP 開發過程中，遇到一個令人挑戰的問題。公司前輩沒有使用 XAMPP x64 環境下成功安裝 OCI8。主要還是我自發性去解決這個問題。主要我覺得很簡單，但是中間還是碰到一些問題，所以才會留下這篇文章。\n所以到我解決這件事情前，公司到目前上線的系統都是使用 x32 架構的 OCI8。接下來還要把上線的系統改為 x64，所以接下來有得忙了 XD\n希望這篇文章能為那些正在尋找解決方案的人們提供一些有價值的指引，幫助大家節省時間和精力。\n關鍵 主要系統為 Windows，若要使用 Linux 可以參考一下安裝過程。\n安裝 XAMPP 建議優先安裝 Windows x64 v8.1.17 版本\nhttps://sourceforge.net/projects/xampp/files/XAMPP%20Windows/8.1.17/xampp-windows-x64-8.1.17-0-VS16-installer.exe/download\n筆者這邊省略安裝過程。\n安裝 Oracle Instant Client 驅動程式 筆者公司是使用 Oracle 11g。\n前輩使用的 Oracle Client 的版本為 12.2.0.1.0，那我就版本一樣沒有改。\n驅動網址：https://www.oracle.com/tw/database/technologies/instant-client/winx64-64-downloads.html\n解壓縮並移動全部 dll 檔案 首先我們下載完 Oracle Client，就直接解壓縮。\n然後排序檔案類型，我們要的是 應用程式擴充，為 .dll 副檔名的檔案。\n如下圖，我們全部複製。\n複製到 xampp\\apache\\bin 資料夾 關鍵之一，如果今天我們使用 XAMPP 啟用 PHP 時，這邊沒有 dll 檔案時，我們的 OCI8 就沒辦法啟動。\n複製到 xampp\\php 資料夾 關鍵之二，如果今天我們 PHP 時，這邊沒有 dll 檔案時，使用 php -m 指令會顯示錯誤。\n安裝 Php OCI8 插件 oci8 插件的說明：https://pecl.php.net/package/oci8\n筆者目前在 Windows 最新版為 3.2.1。\n而網頁中的描述也有提到 Use 'pecl install oci8-3.2.1' to install for PHP 8.1.，所以我們的 XAMPP 的 PHP 指定版本為 8.1.17。\n關鍵之三，所以插件的版本與 PHP 的版本是互相關聯的。 記得要安裝 ts 版本。，你可以參考下圖。\n上面這張圖的紅框位置，會影響到插件的版本\n移動 OCI8 插件的 dll 檔案 首先我們先進行解壓縮。\n再依照 應用程式擴充 排序，所以你現在的畫面會與下圖一樣。\n然後把紅框選取的檔案複製到下圖 XAMPP PHP 插件位置。\n設定 php.ini 驅動程式到這邊都裝好了。\n接下來要讓 PHP 啟用，需要到下圖的位置 xampp/php/php.ini 檔案來啟用 OCI .\n這邊筆者是啟用 oci8_19，來進行測試。\n檢查有無啟用 完成 ","date":"2023-08-21T07:41:54Z","permalink":"/p/xampp-x64-oracle-instant-client/","title":"Php - XAMPP x64 安裝 Oracle Instant Client"},{"content":"前言 前陣子再協助朋友設定 NGINX 時, 發現手邊都沒有在做紀錄 HTTPS 的設定, 所以這次就來紀錄一下。\n其實不難，只是擔心朋友針對機器在做轉 Port 的設定 .. 這樣就會讓我很頭痛了。\n當然後面有解決, 但是花了超出預期的時間。\n小提醒：下面的路徑都是絕對路徑，因為使用的是 Docker，所以路徑會有點不一樣。你可以依照自己的環境去做設定。\n這邊就不特別說明 Docker 的設定及路徑怎麼查詢囉 !\n設定檔案 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 server { # port listen 443 ssl; listen [::]:443 ssl; # server_name www.example.com; # ssl ssl_certificate /home/example/example.crt; ssl_certificate_key /home/example/example.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { root /var/www/html/; index index.html; } location /config { root /var/www/html/; index config.json; } # error error_page 500 502 503 504 /50x.html; } server { # port listen 5000 ssl; listen [::]:5000 ssl; # server_name www.example.com; # ssl ssl_certificate /home/example/example.crt; ssl_certificate_key /home/example/example.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; # path location / { proxy_pass http://myip.com:8080; # proxy header proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto; # proxy_connect_timeout 300; proxy_send_timeout 300; proxy_read_timeout 300; send_timeout 300; keepalive_timeout 300s; client_body_timeout 300s; } # error error_page 500 502 503 504 /50x.html; } server { listen 80 default_server; listen [::]:80 default_server; server_name www.example.com; return 301 https://www.example.com$request_uri; } ","date":"2023-05-14T10:42:02Z","permalink":"/p/nginx-add-https/","title":"Nginx - 將 HTTP 的網頁上線成 HTTPS."},{"content":"前言 因筆者有使用 Heroku、Render.com、Railway 的經驗，那他們都是 PaaS (Platform as a Service，平台及服務) 的服務平台。\n這些 PaaS 平台通常提供了開發工具、執行環境、資料庫、身份驗證、監控等服務，讓開發人員可以專注於應用程式的開發，而不必擔心基礎架構的建設。\n筆者在這邊有分配不同平台的使用情境：(沒列就是我沒使用 ..)\nHeroku：主要負責應用上線 學生身分免費 Render.com：主要負責應用上線、靜態網站 免費 Railway.app：主要負責 RDBMS 資料庫 (PostgreSQL)、快取資料庫 (Redis) 免費 Railway.app 目前有推薦機制，筆者的推薦連結 \u0026ndash;\u0026gt; https://railway.app?referralCode=37Lpxy Railway.app 目前還沒有支援 log stream 那可以知道我在 PaaS 的部份用的非常兇猛，甚至 logging 非常分散，但是 機器不同源，日誌是類似。所以我需要一個有效的方式來收集、管理和分析這些日誌，以便進行錯誤排查、性能優化和安全監控等。\n接下來就是要來講比較實際的 Logtail 的 使用過程(串接) 到 好處(優點)。\n好處一：無痛串接 Paas 平台 Heroku 綁定 Heroku 前，先到 Logtail 申請後就可以直接來用了 .. (如下圖)\n所以你只要做四件事：\n把你的應用程式部屬到 Heroku，確定可以使用 ! 到 Logtail 申請一個 來源(Sources)，依照上圖的步驟操作一次。 然後你就不斷地在 1 步驟 的應用程式不斷刷新頁面. 觀察 Logtail 有沒有新增加 logging. Render.com 1 待補，但基本上跟上面一樣 .. 好處二：內建 Grafana 視覺化平台 Grafana 是一個流行的開源數據視覺化和監控平台，它提供了強大的儀表板和視覺化工具。\n我今天也主要不是探討這個平台，自己用的也不是非常熟。\n筆者使用 papertrailapp 只能串接到自己的視覺化平台，超貴。\n好處三：異常通知 papertrailapp 一樣有。\n好處三：其他平台有的基本上都有 .. 缺點：錢 建議：還是自架 主要還是回到錢的部分，一個月 24 USD 真的不便宜。\n目前是有朝向 Graylog(ElasticSearch or OpenSearch) + Grafana 來建。\n這邊之後再給大家講一下我的架構。\n","date":"2023-04-13T02:46:15Z","permalink":"/p/logtail-log-management/","title":"Logtail - 一個彙整免費 Paas 平台的日誌平台"},{"content":"前言 在網頁開發中，表單是最常見的元素之一。不管是在登入視窗、新增資料，都需要表單的元素進行開發。\n但是當使用者提交表單時，預設情況下，瀏覽器會將表單數據轉換為 URL 字符串，並在網址末尾添加問號和表單數據。\n例如說我表單中有一個 name 的欄位，填寫了 John。這時候送出表單會發送什麼事 ?\n1 2 # 在網址後面加上 ?name=John http://localhost/?name=John 然而，這種情況可能會導致安全性問題或頁面顯示不佳。\n筆者的情況就是出現 ? 導致跳轉至首頁失敗\n重點：\n在這篇文章中，我們將介紹如何使用 JavaScript 預設提交表單，避免 URL 中顯示問號和表單數據。\n解決方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 \u0026lt;template\u0026gt; \u0026lt;v-app id=\u0026#34;inspire\u0026#34;\u0026gt; \u0026lt;!-- Vue2 - 使用套件 Vuetify 表單 --\u0026gt; \u0026lt;v-form ref=\u0026#34;form\u0026#34; lazy-validation @submit.prevent=\u0026#34;login\u0026#34;\u0026gt; \u0026lt;!-- 帳號欄位 --\u0026gt; \u0026lt;v-text-field v-model=\u0026#34;form_data.name\u0026#34; :rules=\u0026#34;rules.name\u0026#34; label=\u0026#34;帳號\u0026#34; required \u0026gt;\u0026lt;/v-text-field\u0026gt; \u0026lt;!-- 密碼欄位 --\u0026gt; \u0026lt;v-text-field v-model=\u0026#34;form_data.password\u0026#34; :append-icon=\u0026#34;show_pwd ? \u0026#39;mdi-eye\u0026#39; : \u0026#39;mdi-eye-off\u0026#39;\u0026#34; :type=\u0026#34;show_pwd ? \u0026#39;text\u0026#39; : \u0026#39;password\u0026#39;\u0026#34; label=\u0026#34;密碼\u0026#34; :rules=\u0026#34;rules.password\u0026#34; @click:append=\u0026#34;show_pwd = !show_pwd\u0026#34; required \u0026gt;\u0026lt;/v-text-field\u0026gt; \u0026lt;!-- 送出按鈕 --\u0026gt; \u0026lt;v-btn dark color=\u0026#34;primary\u0026#34; block class=\u0026#34;mt-8\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;登入\u0026lt;/v-btn\u0026gt; \u0026lt;/v-form\u0026gt; \u0026lt;/v-app\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#34;LoginPage\u0026#34;, data: () =\u0026gt; ({ ... }), // 非探討區域 methods: { login() { this.$refs.form.validate(); // 驗證 if (this.account \u0026amp;\u0026amp; this.pwd) { this.$router.push(\u0026#34;/\u0026#34;); // 跳轉頁面 } else { console.log(\u0026#34;login failed\u0026#34;); // 顯示錯誤 } } } }; \u0026lt;/script\u0026gt; 眼尖的你應該有發現我的 login() 如何觸發 ?\n在 form 元素使用 @submit.prevent 來觸發 submit 事件 !\n其實這個問題沒有太多技巧，就想做這個紀錄，讓自己知道其實 form 元素還有其他事情可以做。\n後續 除了 submit.prevent 以外，form 元素中還有以下的事件修飾符：\n.lazy：在表單提交時只驗證那些已經被修改過的表單欄位，而不是驗證所有欄位。這樣可以提高表單提交的效率。\n.number：將表單欄位的值轉換為數字，如果轉換失敗則返回空字符串。\n.trim：自動去除表單欄位值的開頭和結尾的空格。\n.lazy + .number + .trim：同時應用上面的三種事件修飾符，即只驗證修改過的欄位、轉換為數字並去除空格。\n除了這些事件修飾符之外，還可以使用 .stop、.capture、.self、.once 等事件修飾符。.stop 可以停止事件的傳播，.capture 可以在元素自身之前處理事件，.self 可以限制事件只在元素本身觸發，.once 可以只觸發一次事件。\n這些都是未來可以研究的東西，那麼我先將資訊貼在這 !\n希望之後我能再加強這部分的事件進行了解。\n","date":"2023-03-24T08:24:11Z","permalink":"/p/form-submit-prevent/","title":"網頁原生表單 01 - 如何將表單更改為 Javascript 的函式送出 ?"},{"content":"前言 主要是在撰寫 Django 測試時，有時候會因為某些原因導致測試過程強制中斷，例如程式出錯或手動中斷執行等。\n當發生這種情況時，測試資料庫可能會佔有一些 session 無法正確刪除，進而影響測試的正確性。\n以下是發生的一些關鍵字或 \u0026hellip;. 問題\n1 2 3 4 5 6 7 8 (venv) user@vm:~/backend$ python manage.py test SomethingTestCase -v 3 Creating test database for alias \u0026#39;default\u0026#39; (\u0026#39;test_template\u0026#39;)... Got an error creating the test database: database \u0026#34;test_template\u0026#34; already exists Type \u0026#39;yes\u0026#39; if you would like to try deleting the test database \u0026#39;test_template\u0026#39;, or \u0026#39;no\u0026#39; to cancel: yes Destroying old test database for alias \u0026#39;default\u0026#39; (\u0026#39;test_template\u0026#39;)... Got an error recreating the test database: database \u0026#34;test_template\u0026#34; is being accessed by other users DETAIL: There is 1 other session using the database. 可以看到最後有出現一行關於 database session 的問題。\nDETAIL: There is 1 other session using the database.\n如何解決 查詢目前在 PostgreSQL 中的 Session 有幾個 ? 當 PostgreSQL 資料庫中發現有用戶端連線時，就會產生一個會話或連線的記錄。\n1 2 SELECT * FROM pg_stat_activity; 使用此命令可以查詢正在執行的所有 SQL 語句、會話的狀態、用戶名、資料庫名、主機名、客戶端應用程式等資訊。\n可用於診斷資料庫中的問題，例如瞭解目前資料庫是否被其他用戶連線、哪些查詢正在執行，以及為什麼某些查詢會長時間運行等。\n範例 datid datname pid usesysid username application_name client_addr query \u0026hellip; 10000 test_template 2191385 10 postgres DBeaver 22.3.5\u0026hellip; 192.168.x.1 select a .. 19000 template 2191386 10 postgres DBeaver 21\u0026hellip; 192.168.x.2 select b .. 範例就是 pg_stat_activity 這張表會呈現的內容，資訊量非常豐富。\n如何踢出指定的 Session ? 今天假設我要踢掉範例中的 pid 為 2191385 的 Session.　這時候只要打上下方的指令\n1 SELECT pg_terminate_backend(2191385); 這時候你查詢 SELECT * FROM pg_stat_activity; 一次，你看一下你打上的 pid 對應的 session 是不是已經被你刪除了 !\n那我要怎麼清楚某個指定 user 下的所有 session ? 這個查詢會返回所有用戶名等於 username 的 PostgreSQL Session。\n1 SELECT * FROM pg_stat_activity WHERE usename = \u0026#39;\u0026lt;username\u0026gt;\u0026#39;; 完成 今天是一個 PostgreSQL 的使用知識，正好在寫測時時出現，就把這個過程記錄一下。\n","date":"2023-03-03T06:11:52Z","permalink":"/p/psql-deleted-session/","title":"PSQL 01 - 踢掉指定的 PostgreSQL Session."},{"content":"前言 當今年二月不斷的補班的時候 \u0026hellip;　發現團隊內部有人使用 django-environ 套件。\n筆者過去是使用 python-dotenv。但是發現 django-environ 有提供更多針對 django 框架的框架設定 !\n讀取和解析環境檔案 (.env) 中的變數 將環境變數轉換成適當的 Python 型別 提供一些方便的方法來取得常用的設定值，如資料庫連接字串、快取設定、郵件設定等 支援多種格式的環境變數，如 JSON、YAML、INI 等 針對 資料庫連接字串、快取設定 就是一大優點\n優勢 1 - 資料庫接字串 使用前的設定 筆者再使用 django-environ 前是使用 python-dotenv\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # settings.py DATABASES = { \u0026#34;default\u0026#34;: { \u0026#34;ENGINE\u0026#34;: \u0026#34;django.db.backends.postgresql\u0026#34;, # 1- 設定 ENGINE \u0026#34;NAME\u0026#34;: variables.POSTGRESQL_NAME, # 2- 資料庫名稱 \u0026#34;USER\u0026#34;: variables.POSTGRESQL_USER, # 3- 資料庫使用者 \u0026#34;PASSWORD\u0026#34;: variables.POSTGRESQL_PASSWORD, # 4- 資料庫密碼 \u0026#34;HOST\u0026#34;: variables.POSTGRESQL_HOST, # 5- 資料庫 IP \u0026#34;PORT\u0026#34;: variables.POSTGRESQL_PORT, # 6- 資料庫 PORT } } # variables.py 管理環境變數 POSTGRESQL_PASSWORD = os.getenv(\u0026#34;DB_PASSWORD\u0026#34;, \u0026#34;DEFAULT_PASSWORD\u0026#34;) # 如果沒有 DB_PASSWORD, 就是 DEFAULT_PASSWORD POSTGRESQL_HOST = os.getenv(\u0026#34;DB_HOST\u0026#34;, \u0026#34;localhost\u0026#34;) # 如果沒有 DB_HOST, 就是 localhost .... # .env DB_PASSWORD = postgres POSTGRESQL_HOST = 192.168.1.1 .... 通常我們使用 Django 去連接資料物的時候可能都會需要這些設定。\n使用後的設定 筆者再使用 django-environ 後就直接縮短這個部分的參數\n1 2 3 4 5 6 7 8 9 10 # settings.py DATABASES = { \u0026#39;default\u0026#39;: variables.DATABASE } # variables.py DATABASE = env.db() # default load .env DATABASE_URL # .env DATABASE_URL=\u0026#34;postgres://postgres:postgres@192.168.1.1:5432/mydb\u0026#34; # 如果我要更換成 MYSQL DATABASE_URL=\u0026#34;postgres://postgres:postgres@192.168.1.1:5432/mydb\u0026#34; 優勢 2 - 快取設定 1 待補 Reference joke2k/django-environ: Django-environ allows you to utilize 12factor inspired environment variables to configure your Django application. - GitHub. https://github.com/joke2k/django-environ 已存取 2023/3/1. django-environ - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天. https://ithelp.ithome.com.tw/articles/10233649 已存取 2023/3/1. Welcome to django-environ documentation - Read the Docs. https://django-environ.readthedocs.io/ 已存取 2023/3/1. Django-environd的使用(管理配置文件敏感参数和环境变量)_想学废更多东西的猿的博客-CSDN博客_django environ. https://blog.csdn.net/zscccccc/article/details/121630824 已存取 2023/3/1. ","date":"2023-03-01T17:43:00+08:00","permalink":"/p/django-environ/","title":"Django 紀錄 03 - 使用套件 django-environ 管理環境參數 !! 超方便 !!"},{"content":"前言 最近在使用 django-celery-beat，發現網路上的參數基本上都舊了。\n所以安裝的方式這邊幫大家梳理一下，有時候網路上的安裝方式可能會導致自己花非常多時間。\n如果你是老手，可以直接到 Github 查看程式碼。\nhttps://github.com/CHunYenc/django-celery-beat-example\n版本 name version python 3.10.7 django 4.1.7 celery 5.2.7 django-celery-beat 2.4.0 步驟 建立虛擬環境 當使用 Python 時會使用到大量套件或不同版本的 Python 時，建立虛擬環境可以幫助隔離 Python 的不同版本和套件，以避免版本衝突。\n為了讓有乾淨的環境, 必須建立虛擬環境 !!\nLinux / Mac 1 python -m venv .venv Windows 1 py -3.10 -m venv .venv 進入虛擬環境 接下來啟動 Python 虛擬環境，執行後你的 shell 會切換到虛擬環境中。\nLinux / Mac 1 2 3 source .venv/bin/activate # 進入後 (.venv) path % ... Windows 1 2 3 .venv\\Scripts\\Activate.ps1 # 進入後 (.venv) PS \u0026gt; ... 下面我就僅使用 (.venv) 表示虛擬環境。後面會直接接指令。\n安裝套件 1 (.venv) pip install django celery[redis] django-celery-beat 建立 Django Project 這邊筆者的路徑是已經在 /Users/yen/code/django-celery-beat-example，\n所以當你使用下列指令時，你的 core 資料夾位置應該會是 /Users/yen/code/django-celery-beat-example/core\n1 (.venv) django-admin startproject core . 安裝 Django-Celery-beat core/settings.py 的 INSTALLED_APPS 安裝 django-celery-beat 在 INSTALLED_APPS。\n1 2 3 4 5 6 7 8 9 10 11 # 開發時的習慣, 上線建議不要使用 * ALLOWED_HOSTS = [\u0026#39;*\u0026#39;] # 主要內容 INSTALLED_APPS 加入 \u0026#39;django_celery_beat\u0026#39; INSTALLED_APPS = [ ... ... ... # packages \u0026#39;django_celery_beat\u0026#39;, ] 安裝上去會發現，django-celery-beat 有預設的資料表來控制任務喔 !!!\ncore/celery.py 在這個檔案中設定 Celery 的 instance。一般會設定 broker 和 backend 的位置，以及指定 task 檔案的位置等等。有了這個設定之後，Django 就能夠將要執行的 task 發送到 Celery，由 Celery 負責執行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import logging import os from kombu import Exchange, Queue from celery import Celery # Set the default Django settings module for the \u0026#39;celery\u0026#39; program. os.environ.setdefault(\u0026#39;DJANGO_SETTINGS_MODULE\u0026#39;, \u0026#39;core.settings\u0026#39;) # 建立一個 Celery 實例，名稱為 core app = Celery(\u0026#39;core\u0026#39;) # 設置 broker 和 backend app.conf.broker_url = \u0026#34;redis://localhost:6379/1\u0026#34; app.conf.result_backend = \u0026#34;redis://localhost:6379/0\u0026#34; # 設置時區和序列化方式 app.conf.timezone = \u0026#34;UTC\u0026#34; app.conf.accept_content = [\u0026#39;application/json\u0026#39;] app.conf.task_serializer = \u0026#39;json\u0026#39; app.conf.result_serializer = \u0026#39;json\u0026#39; app.conf.beat_scheduler = \u0026#39;django_celery_beat.schedulers:DatabaseScheduler\u0026#39; # 設置要被 celery worker 載入的任務模組 app.conf.imports = [\u0026#34;core.tasks\u0026#34;] # 設置定時任務 app.conf.beat_schedule = { \u0026#34;system-task\u0026#34;: {　# Celery 任務名稱 \u0026#34;task\u0026#34;: \u0026#34;system-hello-celery\u0026#34;, # Celery 任務執行的函示名稱 \u0026#34;schedule\u0026#34;: 2.0 # 每兩秒執行一次 } } # Load task modules from all registered Django apps. app.autodiscover_tasks() logger = logging.getLogger(\u0026#39;django.celery\u0026#39;) broker_url: Celery 的消息中介。主要 來處理任務的分發和調度，因為它可以將分散在各個系統之間的工作協調起來。\nresult_backend: Celery 結果儲存位置。\ntimezone: Celery 的時區。\naccept_content: Celery Worker 接受的任務格式。除了 json 外, 還有 pickle 等等的任務結構。\ntask_serializer: Celery Worker 執行任務(程式)時需要進行序列化以方便傳輸和儲存。這邊使用 json。\nresult_serializer: Celery Worker 完成任務(程式)時需要進行序列化儲存至 RESULT_BACKEND 指定的 redis。這邊也是使用 json。\nimports: 你可以使用 [\u0026quot;core.tasks\u0026quot;, \u0026quot;app.tasks.function\u0026quot;] 來導入你的任務程式。\nbeat_schedule: 是 Celery 預設的調度器，是後端啟動時直接啟用。\nSERIALIZER 為什麼要設定呢 ? 因為 Celery 4.0 之前是使用 pickle.\n其他我沒提到的設定參數可以到下面連結查看。\nhttps://docs.celeryproject.org/en/stable/userguide/configuration.html#configuration-reference\ncore/init.py 在 __init__.py 主要是要讓 Django 項目中使用 celery_app 與 celery_logger 物件。\n1 2 3 4 5 # core/__init__.py from __future__ import absolute_import from core.celery import app as celery_app, logger as celery_logger __all__ = (\u0026#39;celery_app\u0026#39;, \u0026#39;celery_logger\u0026#39;,) core/tasks.py 主要將 Celery 要執行的程式寫在此處。而 Celery 就會登入該檔案的函式。\n例如這邊有一個 Celery 函示叫 system-hello-celery, 就是對應 core/celery.py 中的 beat_schedule 內的 task。\n1 2 3 4 5 6 7 import json from core import celery_logger from celery import shared_task @shared_task(name=\u0026#34;system-hello-celery\u0026#34;) def hello_celery(): celery_logger.info(\u0026#34;HELLO Celery\u0026#34;) 執行 Celery 使用 Docker 建立 redis 1 docker run -d --restart always -p 6379:6379 --name dev-redis redis 如果在本機執行 docker, 那麼 IP 就是 localhost:6379。\nmigrate database 當您在 Django 中更改模型之後，例如添加、修改或刪除模型，您需要將這些變更反映到資料庫中。\n1 (.venv) python manage.py migrate run celery 開發用 1 (.venv) celery -A core.celery worker -l info -B 上線時 (production) 在正式環境中，不建議在同一個應用程序中運行 worker 和 beat scheduler，因為會影響應用程序的性能和穩定性。\n第一個 terminal 1 (.venv) celery -A core.celery worker --loglevel=info 第二個 terminal 1 (.venv) celery -A core.celery beat -l info 你也可以使用 docker-compose 執行個別一個 services。\n完成 1 2 3 4 5 6 ... 省略 [2023-02-24 09:47:46,349: INFO/MainProcess] celery@DESKTOP-7GLUFOT ready. [2023-02-24 09:47:46,359: INFO/MainProcess] Task system-hello-celery[409aa851-639d-4183-92eb-662715a55b41] received HELLO Celery [2023-02-24 09:47:46,361: INFO/ForkPoolWorker-2] HELLO Celery [2023-02-24 09:47:46,381: INFO/ForkPoolWorker-2] Task system-hello-celery[409aa851-639d-4183-92eb-662715a55b41] succeeded in 0.02016970000022411s: None 後續 你還可以透過 django-environ 套件來優化你的 settings.py 或 celery.py，將環境設定的資訊都隱藏。\n那也是我後續要來新增的文章 XD\n","date":"2023-02-22T22:17:10+08:00","permalink":"/p/django-celery-beat/","title":"Django 紀錄 02 - 如何在 Django 應用使用 Celery 進行系統任務管理"},{"content":"前言 祝大家新年快樂 !!!\n今天是初六，也休息一陣子了，覺得有點廢。\n主要是因為大四時擔任宿舍網路會長時製作的 LINE-BOT 上線在 heroku，但是 2022/12 已經公告說他們要開始收錢了。於是我就將 LINE-BOT 的伺服器轉移到 render.com 平台。\n那在轉移時有製作一個工具。就是要不間斷的去呼叫免費平台(類似 heroku.com、render.com)。\n就是要讓機器永遠不睡眠 ! 操爆它 (X)\n統整做了三件事：\n運用 Python 定時呼叫小應用的網址 利用 Docker 彈性系統參數 利用 Docker Compose 定時呼叫多個平台 本篇不是教你怎麼做這個工具，是教你如何用。\n所以會從 2. 來教你怎麼做 !\n利用 Docker 來使用工具 工具只需要透過 Docker 就可以執行囉 !\n範例如下：範例下方還有部分說明唷 !\n**** 記得要先建立一個 schedule.log 檔案。\n1 2 3 4 5 6 7 8 docker run -d \\ --restart always \\ --name wakeup-render \\ -e URL=https://yourwebsite.domain.com/ \\ -e APSCHEDULER_DAY_OF_WEEK=mon-fri \\ -e APSCHEDULER_MINUTE=*/10 \\ -v /Users/yen/Desktop/schedule.log:/app/scheduler.log \\ chunyenc/wakeup-machine --restart 若重開機將自動執行 --name container 的名稱 -e 環境變數 URL 是你要呼叫的網址 APSCHEDULER_DAY_OF_WEEK 一週裡面哪幾天執行 APSCHEDULER_MINUTE 是多少分鐘呼叫一次 -v 映射檔案 linux 可以使用 pwd 指令來查看目前的絕對路徑 schedule.log 就是查看執行 log 的檔案 環境變數列表 環境變數 範例值 備註 URL https://chunyen.xyz 呼叫的網址 APSCHEDULER_YEAR APSCHEDULER_MONTH APSCHEDULER_DAY APSCHEDULER_WEEK APSCHEDULER_DAY_OF_WEEK mon-fri 依照範例，設定週一到週五 APSCHEDULER_HOUR APSCHEDULER_MINUTE */10 依照範例，設定每十分鐘 APSCHEDULER_SECOND APSCHEDULER 需要參考下面網址來設定 https://apscheduler.readthedocs.io/en/3.x/modules/triggers/cron.html\n如果是使用 Docker Compose .. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 version: \u0026#39;3.9\u0026#39; services: service-one: image: chunyenc/wakeup-machine environment: - URL=https://one.chunyen.xyz - APSCHEDULER_MINUTE=*/10 - APSCHEDULER_HOUR=0-1,5-23 - APSCHEDULER_DAY_OF_WEEK=mon-fri volumes: - ./pricing.log:/app/scheduler.log service-two: image: chunyenc/wakeup-machine environment: - URL=https://two.chunyen.xyz - APSCHEDULER_MINUTE=*/10 - APSCHEDULER_HOUR=9-23 volumes: - ./linebot.log:/app/scheduler.log ","date":"2023-01-27T15:53:22+08:00","permalink":"/p/wakup-machine/","title":"教學 01 - 如何讓 render.com 提供的機器不睡眠"},{"content":"前言 主要為存放工作中經常使用的指令、框架、套件。\n若有任何建議或是覺得需要修改的地方還請不吝指教，謝謝！\n如何聯繫我 ?\n可以利用本篇文章下面留言，導航列也有提供我的社群平台 ~\n目錄 電腦版右側有目錄，手機版沒有，這邊的目錄為了手機版而整理 !\n前言 目錄 套件框架區 VSCode Markdown 常用指令區 Git 下載子模組 切換遠端分支 Vue 更改 Port Docker Redis PostgreSQL 套件框架區 VSCode Markdown https://github.com/yzhang-gh/vscode-markdown 自動生成 md 目錄 常用指令區 Git Git 是一個分散式版本控制系統，用於追蹤檔案變更並協助多人共同開發專案。\n下載子模組 當你使用 git clone 下載完儲存庫後，發現沒有下載 submodule, 使用下面的指令可以直接把子模組載入。\n1 git submodule update 切換遠端分支 待補\nVue 更改 Port cli-services 版本為 @vue/cli-service\u0026quot;: \u0026quot;~5.0.0，如果不是也可以試試看。\n1 2 # default 8080 npm run serve -- --port 8000 Docker Redis 1 2 3 4 5 docker run -d \\ --restart always \\ -p 6379:6379 \\ --name dev-redis \\ --network dev-network redis Q: 為什麼有 dev-network ?\nA: 為了可以讓開發容器可以直接使用 dev-redis 進行連線 ! 前提是開發容器也要使用 dev-network 建立 !\nPostgreSQL 1 2 3 4 5 6 7 docker run -d \\ --restart always \\ --name dev-postgres \\ -p 5432:5432 \\ -e POSTGRES_PASSWORD=postgres \\ -v /home/user/dev-pg-data/pgdata:/var/lib/postgresql/data \\ --network dev-network postgres:10 ","date":"2023-01-18T11:38:22+08:00","permalink":"/p/common-scripts/","title":"置頂 - 提高效率的必備指令：一份我的常用指令與工具清單"},{"content":"前言 主要是有應用架設在 Heroku, 發現他要所謂 Server Name Indication (SNI) 的方式來部署 HTTPS。\n結論就是 DNS 從 Google Domains 換成 Cloudflare，然後碰到轉址、HTTPS的問題。\n透過 Cloudflare 弄上 HTTPS 時，發現 Blogger、Github page 都不能正常瀏覽。\n因為 Blogger、Github Page 本身就可以加上 HTTPS，但是加上 HTTPS 後一直不能瀏覽。\n然後 HTTPS 是可以正常瀏覽。\n問題特徵 將前言的整理一下，如果你有下面的問題，可以參考我怎麼解決的！\nhttp 可以正常瀏覽頁面。 改成 https 無法瀏覽頁面。顯示「這個網頁無法正常運作」。 使用 blogger 步驟 1 - 進入 設定 步驟 2 - HTTPS 重新導向 開啟 使用 Github 步驟 1 - 點擊儲存庫 YOURGITHUBNAME.github.io 步驟 2 - 進入 Settings 步驟 3 - 點擊 Pages, 設定頁面並加入自定義 domain. 步驟 4 - Enforce HTTPS 開啟 關於第 2 點。不管是 blogger、Github 都會導致「這個網頁無法正常運作」的狀況。\n如果你的狀況跟我很類似，或許你可以試試看 !\n設定方式 將 SSL/TLS 改為 FULL 模式 我原本的設定是 Flexible (彈性) 模式。\n關於 Flexible 模式的說明，其實 Cloudflare 官方文檔有提到碰到的問題。\nFlexible 模式\nFlexible 雖然開啟後好用，可以將 HTTP 的網頁透過 Cloudflare 的處理後變成 HTTPS。\n但是原本的網頁已經有 HTTPS 時，就要透過 FULL 模式去做處理。\n如果你的網頁都是使用 HTTP，那麼你可以預設 Flexible。\n路由規則 了解路由規則時，先釐清自己的使用需求是不是符合。\n我的主網域：https://chunyen.xyz (Github Page，有 HTTPS)\n我的子網域：https://b.chunyen.xyz (Blogger，有 HTTPS)\n我的子網域：http://p.chunyen.xyz (自己的應用，無 HTTPS)\n假設我的網頁、部落格內建的 HTTPS 較多，其實我就直接使用 FULL 模式。\n若是相反呢？我就使用 Flexible。\n再透過 Cloudflare 路由規則將指定的網頁設定成其他模式 ! 只有三個的扣打可以使用其他模式。\n步驟：\n點擊 規則 再點擊 網頁規則 同一頁的 建立網頁規則 填入 URL 後，記得要選取 挑選設定 的 SSL 為你要設定的模式。 接下來應該沒問題了 ! 免費時間等超久。\n但是免費的還是等吧 xD\n最後的設定 我將 SSL/TLS 設定為彈性。 另外透過兩個 路由規則 來設定我的 blogger、github page 的網頁 路由規則的部分剩下一個扣打。\n若依照我的設定，應該你的網頁就可以正常瀏覽了！\n花了非常多時間。但沒想到 Cloudflare 提供這麼多免費的服務，之前一直有看到這間公司的 Logo，但一直沒機會使用。\n完成 ! ","date":"2023-01-16T00:02:09+08:00","permalink":"/p/cloudflare-dns-error/","title":"Cloudflare - 架設 Google-blogger 與 Github-page DNS 困難排除"},{"content":"前言 準備要幫自己手上的專案套上 CI/CD，但是發現過去的資料其實沒有使用 submodule 的方式去管理 data。\n此處的 data 是一個資料夾，裡面放的是客戶系統的資料。會有 .csv or .json 的檔案。\n所以導致系統的 儲存庫 (repository) 異常的大，都是大在過去 commit 過的紀錄。\n最新的 commit 已經把所謂 data 的資料夾刪除了，但是 git 其實還會幫你存在 .git 資料夾\n參考文章 感謝這邊的文章，雖然我還是卡一陣子，導致這篇文的產生 XD\nCSDN - 彻底删除git中的较大文件（包括历史提交记录） 高見龍 - 為你自己學 Git Nils Jonsson - Rebasing tags in Git repositories 先說結論 尚未優化前，佔 1.2G\n優化後，佔 121MiB\n步驟 建議執行前 fork 一份 可以在本地端或伺服器端。\nlocal 端\n做錯的話你可以直接 copy 重新 不用一直 clone remote 端\n主要是備份 .. 東西不見太恐怖了 !!! 請確實做好備份。\n重新 clone 一次 (重新下載你的程式碼) 1 git clone https://..... project 我這邊範例將下載的資料夾取為 project\n這個動作是為了確保你本地端的程式碼與伺服器端的程式碼相同。\n因為我們主要要解決儲存庫的　.git　資料夾。\n查看 10 個在 Git 裡面最大的檔案 先假設 10 個檔案就可以找到我們心目中想要刪掉的檔案名稱，那為什麼我都使用 git rm　的指令，\n1 git rev-list --all | xargs -rL1 git ls-tree -r --long | sort -uk3 | sort -rnk4 | head -10 刪除 Git 檔案 提供你複製，複製後將 檔案名稱 更改掉，因為他要打上你想要刪除的檔案 or 資料夾。\n1 git filter-branch --force --index-filter \u0026#39;git rm -rf --cached --ignore-unmatch 檔案名稱\u0026#39; --prune-empty --tag-name-filter cat -- --all 下面是我的範例，提供給你參考。\n1 2 # example 刪除 data folder, csv and json file. git filter-branch --force --index-filter \u0026#39;git rm -rf --cached --ignore-unmatch data *.json *.csv\u0026#39; --prune-empty --tag-name-filter cat -- --all *.json ：刪除 .json 檔名的檔案。 --forec ：強制刪除 --index-filter ：刪除的時候索引重寫。 --prune-empty：將空白的 commit 刪除。 --tag-name-filter tag: 將會重寫 tag 的索引。 Git 官方網站：filter-branch\n清理 .git 資料夾 1 2 3 4 5 rm -rf .git/refs/original/ git reflog expire --expire=now --all git gc --prune=now git gc --aggressive --prune=now git push origin master --force 這邊我有先將伺服器端的儲存庫刪除，再重新上傳。\n注意要備份啊 !!!!!!\n另外你也可以透過下面的指令看現在 .git 或 資料夾內部的使用空間。\n1 2 3 4 5 6 7 cd project # 查看 git 資料夾的使用空間 du -sh .git # 查看全部檔案的使用空間, 但看不到 .git du -sh * ","date":"2022-12-21T13:36:01+08:00","permalink":"/p/git-deleted-commit-big-files/","title":"GIT 小撇步 02 - 教你如何刪除 commit 過的大檔案, 超占空間 !"},{"content":"簡介 主要在 Flask 連接 redis 一直發生問題，所以使用 Flask-Caching 來處理讀寫 redis.\n但是還是有一點問題，就是 Flask-Caching 官方沒有支援讀取 redis 的用法，但是在網路上有看到一則留言。\n成功所以紀錄一下。\n程式碼在此 Github - CHunYenc/get-crypto-price-backend(dev/flask-no-celery)\nFlask-Cacing 文檔 Flask-Caching docs\n安裝 Flask-Caching 1 pip install Flask-Caching Init Flask-Caching 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from flask_caching import Cache cache = Cache(config={\u0026#34;CACHE_TYPE\u0026#34;: \u0026#34;RedisCache\u0026#34;}) def create_app(env): ... app = Flask(__name__) app.config.from_object(config[env]) ... with app.app_context(): ... # Caching cache.init_app(app) ... 讀 redis 特殊方式 1 2 3 4 k_prefix = cache.cache.key_prefix keys = cache.cache._write_client.keys(k_prefix + \u0026#34;*\u0026#34;) keys = [k.decode(\u0026#34;utf8\u0026#34;) for k in keys] keys = [k.replace(k_prefix, \u0026#34;\u0026#34;) for k in keys] k_prefix 是 Flask-Caching 會自動加入 flask-cache 在 redis 上面，所以需要把 k_prefix 去除。\n程式碼參考位置 /backend/app/socket.py\n","date":"2022-11-17T22:57:28+08:00","permalink":"/p/flask-caching-redis/","title":"Flask 紀錄 01 - 使用 Flask-Caching 和 Redis 實現快速緩存的方法"},{"content":"正文 建立 image 提供複製的指令。\n1 2 # create image from dockerfile docker build -t \u0026lt;image-name\u0026gt; . --no-cache 實際上在使用的時候，會是以下的範例。\n1 docker build -t mydocker . --no-cache 輸入完後 docker image 就會開始建立。\n完成後，進行檢查時就使用下面的指令。\n1 docker images 然後就顯示機器上擁有的 docker images\n1 2 REPOSITORY TAG IMAGE ID CREATED SIZE mydocker latest 0a045e9f442f 19 minutes ago 568MB 執行 image 1 docker run \u0026lt;image-name\u0026gt; 刪除 image 如何先查看本機上已經建立的 image 清單.\n1 2 3 4 docker images - REPOSITORY TAG IMAGE ID CREATED SIZE mydocker latest 0a045e9f442f 19 minutes ago 568MB 1 2 # 這邊刪除上面建立的 image docker rmi 0a045e9f442f 範例 經常使用的 docker run 範本，所以導致本篇會持續更新的原因。\npostgres 好看版本 1 2 3 4 5 6 7 docker run -d \\ --restart always \\ --name dev-postgres \\ -p 5432:5432 \\ -e POSTGRES_PASSWORD=postgres \\ -v /home/user/dev-pg-data/pgdata:/var/lib/postgresql/data \\ --network dev-network postgres:10 複製版本 1 docker run -d --restart always --name dev-postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres -v /home/user/dev-pg-data/pgdata:/var/lib/postgresql/data --network dev-network postgres:10 redis 好看版本 1 2 3 4 5 docker run -d \\ --restart always \\ -p 6379:6379 \\ --name dev-redis \\ --network dev-network redis 複製版本 1 docker run -d --restart always -p 6379:6379 --name dev-redis --network dev-network redis oracle-xe 好看版本 1 2 3 4 5 docker run -d \\ --restart always \\ --name dev-oracle -p 1521:1521 \\ -e ORACLE_PASSWORD=\u0026lt;your password\u0026gt; \\ -v oracle-volume:/u01/app/oracle/oradata gvenzl/oracle-xe:11 複製版本 1 docker run -d --restart always --name dev-oracle -p 1521:1521 -e ORACLE_PASSWORD=\u0026lt;your password\u0026gt; -v oracle-volume:/u01/app/oracle/oradata gvenzl/oracle-xe:11 nginx 待補\n","date":"2022-09-03T12:55:54+08:00","permalink":"/p/docker-common-commands/","title":"Docker 紀錄 03 - 經常使用的 docker 指令"},{"content":"前言 後端 Django 使用 WSL2 建立，但是要讓同事連時，該怎麼處理?\n處理方法 到 WSL2 查詢 IP 1 2 3 4 5 6 7 8 9 10 11 yen@DESKTOP-xxx:/mnt/c/.../$ ifconfig eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 172.24.134.84 netmask 255.255.240.0 broadcast 172.24.143.255 inet6 fe80::215:5dff:fea3:d5d7 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether 00:15:5d:a3:d5:d7 txqueuelen 1000 (Ethernet) RX packets 43142 bytes 7192731 (7.1 MB) RX errors 0 dropped 2 overruns 0 frame 0 TX packets 1060 bytes 178104 (178.1 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ... 關鍵是在 172.24.134.84，要去記得 WSL2 的 IP 位置。\n這邊要記得 HOST 為 172.24.134.84、PORT 為 9000。(你要分享的 PORT)\n到 Windows 轉發 WSL2 的連線位置 以下是範例，進行複製的話，不要複製這個，去樣本複製：\n1 2 3 PS C:\\Users\\xxx\u0026gt; netsh interface portproxy add v4tov4 listenport=9000 listenaddress=0.0.0.0 connectport=9000 connectaddress=172.24.134.84 說明：\nlistenport=9000\nlistenport 意思為我要讓別人連線的 PORT 是 9000。\nlistenaddress=0.0.0.0\nlistenaddress 意思為我要讓別人連線的 IP 是 0.0.0.0，就是指你現在 Windows 的 IP\nconnectport\nconnectaddress 意思為被轉發的 PORT。填寫 WSL2 的 PORT\nconnectaddress\nconnectaddress 意思為被轉發的 IP。填寫 WSL2 的 IP\n以下是樣本，提供你複製：\n1 netsh interface portproxy add v4tov4 listenport=xxxx listenaddress=0.0.0.0 connectport=xxxx connectaddress=172.x.x.x 使用瀏覽器連線你的 IP 查看自己 Windows 的 IP 1 2 3 4 5 6 7 8 9 10 11 12 13 PS C:\\Users\\xxx\u0026gt; ipconfig Windows IP 設定 乙太網路卡 乙太網路: 連線特定 DNS 尾碼 . . . . . . . . : 連結-本機 IPv6 位址 . . . . . . . : xxxxxxxxxxxxxxxxxxxxxx IPv4 位址 . . . . . . . . . . . . : 192.168.1.108 子網路遮罩 . . . . . . . . . . . .: 255.255.255.0 預設閘道 . . . . . . . . . . . . .: 192.168.1.254 .... 這邊可以知道我的 IP 是 192.168.1.108\n連線到 http://192.168.1.108:9000\n如何刪除剛剛新增的設定 查詢新增的 portproxy 1 2 3 4 5 6 7 C:\\Users\\xxx\u0026gt; netsh interface portproxy show v4tov4 接聽 ipv4: 連線到 ipv4: 位址 連接埠 位址 連接埠 --------------- ---------- --------------- ---------- 0.0.0.0 9000 172.24.134.84 9000 刪除 portproxy 1 C:\\Users\\xxx\u0026gt; netsh interface portproxy delete v4tov4 listenport=9000 listenaddress=0.0.0.0 確認 portproxy 是否刪除 1 2 3 C:\\Users\\xxx\u0026gt; netsh interface portproxy show v4tov4 沒顯示任何訊息就是沒有透過 portproxy 轉發的 port 了 !! 完成囉！\n記得如果有將後端或其他應用分享出去時，記得要重新啟動！\nReference https://stackoverflow.com/questions/61002681/connecting-to-wsl2-server-via-local-network\n","date":"2022-07-26T15:27:00+08:00","permalink":"/p/wsl2-port-forwarding/","title":"WSL2 紀錄 01 - 將 WSL2 指定 PORT 從 Windows 轉發出來"},{"content":"前言 主要紀錄建立 oracle-xe-11g 這個 image 的過程。\n容器大小 1 2 3 root@vm-1-47:/home/ubuntu# docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracleinanutshell/oracle-xe-11g latest ad13c30ec346 3 years ago 2.13GB 操作 docker docker run 1 docker run -d --name oracle-db -p 1521:1521 -e ORACLE_ALLOW_REMOTE=true oracleinanutshell/oracle-xe-11g 說明：\n-d 為背景執行 \u0026ndash;name container-name，把你的容器命名 -p 為 port 號 host-port:container-port -e 為環境變數 ORACLE_ALLOW_REMOTE，因為要建立在虛擬機上，要從其他電腦連過來。 oracle docker exec 執行之前，我們要先查看我們 oracle-db 的 CONTAINER ID\n1 2 3 root@vm-1-47:/home/ubuntu# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 18681d31f0ec oracleinanutshell/oracle-xe-11g \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 3 seconds ago Up 1 second 22/tcp, 8080/tcp, 0.0.0.0:1521-\u0026gt;1521/tcp oracle-db 這時候後複製 18681d31f0ec。\n1 2 root@vm-1-47:/home/ubuntu# docker exec -it 18681d31f0ec /bin/bash root@18681d31f0ec:/# 建立 oracle user 1 2 3 4 5 6 7 8 9 10 11 12 13 14 root@18681d31f0ec:/# su - oracle oracle@18681d31f0ec:~$ sqlplus / as sysdba SQL*Plus: Release 11.2.0.2.0 Production on Wed Jul 13 03:04:33 2022 Copyright (c) 1982, 2011, Oracle. All rights reserved. Connected to: Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production SQL\u0026gt; create user yen identified by 0107; User created. SQL\u0026gt; 授予 oracle user 權限 1 2 SQL\u0026gt; grant dba to yen; Grant succeeded. ","date":"2022-07-13T10:36:26+08:00","permalink":"/p/docker-oracle-xe-11g/","title":"Docker 紀錄 02 - 使用 oracleinanutshell/oracle-xe-11g 紀錄"},{"content":"前言 主要就是將原始程式碼轉成暗碼，雖然能夠不讓自己的程式碼直接裸奔。\n但是若碰到有心人士也是一樣可以透過逆向工程把你的程式碼還原。\n提到明碼轉成暗碼，優先選擇 Cython 來執行，速度甚至可能變快(?)，實際上當然還沒測試，只是看到非常多人透過 Cython 讓自己 Python 程式碼變快 XD\n真是期待，但今天並不是來測試效能，而是優先將 Django-app 轉換成 so 檔執行 !!\n操作 可以參考 Reference 第一篇文章的程式碼來執行，但是我這邊主要也是整理一下我自己實作的部分提供參考。\n操作環境 使用 WSL2，要注意如果使用 Windows 進行 Cython，\n在執行上面有跑出問題，所以我是放棄了。\n1 2 3 4 5 6 root@DESKTOP-xxx:/mnt/c/Users/xxx# lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 18.04.6 LTS Release: 18.04 Codename: bionic 資料夾架構 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 root@DESKTOP-xxx:/core$ tree -L 3 . ├── README.md ├── apps │ └── app1 │ ├── __init__.py │ ├── admin.py │ ├── apps.py │ ├── functions │ ├── migrations │ ├── models.py │ ├── tests.py │ ├── urls.py │ └── views.py ├── build_clear.py ├── build_py_to_so.py # 本文主角 ├── core │ ├── __init__.py │ ├── asgi.py │ ├── settings.py │ ├── urls.py │ ├── variables.py │ └── wsgi.py ├── logs │ └── debug.log ├── manage.py ├── requirements.txt ├── run_venv.sh ├── templates └── venv 其中最重要的就是 build_py_to_so.py 這支檔案，待會會將程式碼貼在本文。\n另外為了防止疑惑，以下說明其他資料夾的內容\n關於 Django core - 為 django project 主要資料夾 apps - 為 django app 生成的位置，如果建立在主目錄會非常亂 logs - 儲存 log 檔的資料夾 templates - 儲存 html 檔的資料夾 manage.py - django 預設 關於 Python venv - 虛擬環境 requirements.txt - pip freeze, 為需要用的的套件 build_clear.py - 自動清理 .py、.c 檔案，建議參考 Reference 第一篇文章 程式碼連結：https://gist.github.com/CHunYenc/adcdd234aab33d621fdfa127e41ee16a 其他 run_venv.sh 如何將 APP 從 py 轉為 cython build_py_to_so.py 導入套件 1 2 3 4 5 6 from distutils.core import setup from distutils.extension import Extension from Cython.Build import cythonize from Cython.Distutils import build_ext import Cython.Compiler import os 上面是使用到的套件，非常簡單，大部分都是 import Cython 套件。\n取得 app 路徑 1 2 3 4 5 6 7 8 9 10 11 # app 的資料夾名稱 app_name = \u0026#34;app1\u0026#34; # app 使用 function 資料夾架構 functions_name = \u0026#34;functions\u0026#34; # 取得 app1 資料夾路徑 app_folder = os.path.join(os.path.join(os.getcwd(), \u0026#39;apps\u0026#39;), app_name) # 取得 app1/functions/*.py function_file = os.path.join(os.path.join(app_folder, \u0026#39;functions\u0026#39;), \u0026#39;*.py\u0026#39;) # 取得 app1/*.py app_file = os.path.join(app_folder, \u0026#39;*.py\u0026#39;) 上面是取得資料夾的一些路徑，如果你有非常多的 app 要把程式碼轉為 cython，\n那也可以將你的 apps 使用 os.path.join，路徑的話應該會是 apps/**/*.py。\n注意：app1/migrations/，在執行的時候無法使用 Cython ， 會出錯誤。\n注意：app1/migrations/，在執行的時候無法使用 Cython ， 會出錯誤。\n注意：app1/migrations/，在執行的時候無法使用 Cython ， 會出錯誤。\n若你解決了，可以再留言跟我分享，你的方式。\n主要程式碼 這邊如果你是參考 Reference 第一篇文章的話，他是沒有第 3 行迴圈的部分，\n這邊我主要是忽略 app1/migrations/ 資料夾產生的錯誤。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def to_so(): format_folder = [app_file, function_file] for i in format_folder: try: ext_modules = [Extension(\u0026#39;*\u0026#39;, [i], )] setup( name=\u0026#34;py to so\u0026#34;, cmdclass={\u0026#39;build_ext\u0026#39;: build_ext}, ext_modules=cythonize(ext_modules, language_level=\u0026#34;3\u0026#34;) ) except Cython.Compiler.Errors.CompileError as e: # 獲取檔名 filename = str(e).split(\u0026#39;\\n\u0026#39;)[-1] print(filename) os.popen(\u0026#39;autopep8 --in-place --aggressive --aggressive \u0026#39; + os.path.join(os.getcwd(), filename)) # 繼續轉換 to_so() if __name__ == \u0026#39;__main__\u0026#39;: to_so() 接下來，我們要執行這支程式。\n1 2 root@DESKTOP-xxx:/core# source /venv/bin/activate (venv) root@DESKTOP-xxx:/core# python build_py_to_so.py build 這時發現 app1 資料夾內副檔名為 .c 的檔案。另外也會產出一個 build 資料夾。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 (venv) root@DESKTOP-xxx:/core# tree -L 3 . ├── apps │ └── app1 │ ├── functions │ ├── migrations │ ├── .... 檔案太多, 吃掉 ... │ ├── views.c │ └── views.py ├── build # │ ├── lib.linux-x86_64-3.7 # 主要 django app 程式碼都在此處 │ │ ├── connect.cpython-37m-x86_64-linux-gnu.so │ │ ├── app1 │ │ │ ├── __init__.cpython-37m-x86_64-linux-gnu.so │ │ │ ├── admin.cpython-37m-x86_64-linux-gnu.so │ │ │ ├── apps.cpython-37m-x86_64-linux-gnu.so │ │ │ ├── models.cpython-37m-x86_64-linux-gnu.so │ │ │ ├── tests.cpython-37m-x86_64-linux-gnu.so │ │ │ ├── urls.cpython-37m-x86_64-linux-gnu.so │ │ │ └── views.cpython-37m-x86_64-linux-gnu.so │ │ └── format.cpython-37m-x86_64-linux-gnu.so │ └── temp.linux-x86_64-3.7 │ └── mnt ├── build_clear.py ├── build_py_to_so.py └── venv 這樣我們就把 python 轉成 cython 檔案囉！\n但我們如果要將程式碼交給客戶時，只要將 so 檔案，放入原本的資料夾內，\npython 也會優先執行 cython 的檔案唷 !!!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 (venv) root@DESKTOP-xxx:/core# tree -L 3 . ├── README.md ├── apps │ └── app1 │ ├── .... 檔案太多, 吃掉 ... │ ├── views.c │ ├── views.cpython-37m-x86_64-linux-gnu.so │ └── views.py ├── build │ ├── lib.linux-x86_64-3.7 │ └── temp.linux-x86_64-3.7 ├── build_clear.py ├── build_py_to_so.py └── venv 這時候，我們就完成將 python 轉成 cython 程式碼囉 !!!\n1 2 3 4 5 6 7 8 9 10 11 (venv) root@DESKTOP-xxx:/core# tree -L 3 . ├── README.md ├── apps │ └── app1 │ ├── .... 檔案太多, 吃掉 ... │ ├── urls.cpython-37m-x86_64-linux-gnu.so │ └── views.cpython-37m-x86_64-linux-gnu.so ├── build_clear.py ├── build_py_to_so.py └── venv 改成上面只剩下 app1 的資料夾底下只有 .so 檔的方式，沒意外的話也要能夠執行喔 !!\n執行結果 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 (venv) root@DESKTOP-xxx:/core/apps# tree -L 2 . └── app1 ├── __init__.cpython-37m-x86_64-linux-gnu.so ├── __pycache__ ├── admin.cpython-37m-x86_64-linux-gnu.so ├── apps.cpython-37m-x86_64-linux-gnu.so ├── functions ├── migrations ├── models.cpython-37m-x86_64-linux-gnu.so ├── tests.cpython-37m-x86_64-linux-gnu.so ├── urls.cpython-37m-x86_64-linux-gnu.so └── views.cpython-37m-x86_64-linux-gnu.so 4 directories, 7 files (venv) root@DESKTOP-xxx:/core/apps# python ../manage.py runserver 0.0.0.0:8555 2022-07-12 08:28:46 - autoreload.py -\u0026gt; run_with_reloader() : Watching for file changes with StatReloader Performing system checks... System check identified no issues (0 silenced). July 12, 2022 - 08:28:46 Django version 3.2.13, using settings \u0026#39;core.settings\u0026#39; Starting development server at http://0.0.0.0:8555/ Quit the server with CONTROL-C. Reference https://imshanks.com/2019/08/03/converting-django-project-py-file-to-so-file.html https://cython.readthedocs.io/en/latest/ https://gist.github.com/CHunYenc/adcdd234aab33d621fdfa127e41ee16a ","date":"2022-07-11T17:31:45+08:00","permalink":"/p/django-cython/","title":"Django 紀錄 01 - 將 Django App 程式碼轉成 Cython 來保護程式碼"},{"content":"前言 有一天下午，把某項任務完成後，就下指令 git add\n然後沒有 git commit \u0026hellip; (更不用說 git push)\n總之就在整理前後端版本對應的問題，然後就直接 git checkout -f master 跳去 master，主要是覆蓋版本，因為主分支已經很久沒有上新版了。\n最後 \u0026hellip; 前端的程式碼被我弄丟了 !\n解法 git fsck 有看到一個 十年前的文章 (今天是 2022/07/07)\n連結：http://blog.hsatac.net/2012/07/git-restore-removed-files/\n1 2 3 4 5 6 7 PS C:\\code\\frontend\u0026gt; git fsck --cache --unreachable Checking object directories: 100% (256/256), done. Checking objects: 100% (2592/2592), done. unreachable blob 7fc292a549c604ee4219b2e0db9383b32f3ce152 unreachable blob 05037508dd7dda94f5fb422a7867471247283403 unreachable blob 7c83ff9c66bf28827bd0fbb2aa5e377e460829fe ... 底下還有很多 接下來每行 blob 7fc292a549c604ee4219b2e0db9383b32f3ce152 都是你之前尚未 commit 的檔案。(不是很確定\ngit show 接下來就是每一行的看檔案了 \u0026hellip;\n1 git show 7fc292a549c604ee4219b2e0db9383b32f3ce152 \u0026gt; temp.txt 接下來你的 C:\\code\\frontend (這是我的位置)\n就會看到有一個 temp.txt\n基本上就是檔案回來囉 !\n希望對您有幫助 !\n完成 ","date":"2022-07-06T17:59:19+08:00","permalink":"/p/git-find-out-not-commit-files/","title":"GIT 小撇步 01 - 教你找回尚未 commit 且遺失的檔案"},{"content":"前言 之前的我都是去 docker hub pull,\n但是今天發現 docker pull 的方式不一樣了。\n直接寫解法 前往 oracle container 註冊 https://container-registry.oracle.com 登入完後，點擊 Database 同意授權 1 請記得要點擊 Continue. 授權 1 顯示打勾之後，再繼續下面的操作。 docker login 看你的環境是什麼，我今天使用的公司電腦，所以以下使用 Windows 的 PowerShell。\n注意：這邊的話會叫你輸入登入資訊，但是因為我已經登入過了。\n注意：這邊的話會叫你輸入登入資訊，但是因為我已經登入過了。\n注意：這邊的話會叫你輸入登入資訊，但是因為我已經登入過了。\n1 2 3 PS D:\\\u0026gt; docker login container-registry.oracle.com Authenticating with existing credentials... Login Succeeded 這時候就可以下載 container-registry.oracle.com 的 images ，\n你可以先 COPY 下面的指令。\n1 docker run -d --name oracle-db container-registry.oracle.com/database/enterprise:21.3.0.0 這邊是測試，使用 docker run 來下載 container-registry.oracle.com 的 image.\n1 2 3 4 5 6 7 8 PS D:\\\u0026gt; docker run -d --name oracle-db container-registry.oracle.com/database/enterprise:21.3.0.0 Unable to find image \u0026#39;container-registry.oracle.com/database/enterprise:21.3.0.0\u0026#39; locally 21.3.0.0: Pulling from database/enterprise 401a42e1eb4f: Pulling fs layer a13a3f09d2fa: Pulling fs layer a55a58a3063b: Pulling fs layer d6422a9150b2: Pulling fs layer ..... 以下太多資訊 省略 完成 ","date":"2022-06-29T13:31:59+08:00","permalink":"/p/docker-pull-oracle-database-image/","title":"Docker 紀錄 01 - 2022 使用 Docker 建立 Oracle Database"},{"content":"環境 趁這次假日架設了 Jenkins，但是目前為止 M1 處理器皆不支援。\n所以用在學生時期使用的 Oracle Cloud 建立一台虛擬機，以下都可以適用在任何雲端平台來操作。\nUbuntu 版本 1 2 3 4 5 6 7 # lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 18.04.6 LTS Release: 18.04 Codename: bionic Docker 版本 1 2 # docker -v Docker version 20.10.14, build a224086 操作 README 官方閱讀手冊\n以下皆是參考上面的連結，很重要\n開始 切記這邊不能使用 -d 指令，否則會影響到第一次啟動密碼\n1 docker run --name jenkins -p 8080:8080 -p 50000:50000 --restart always jenkins/jenkins:lts-jdk11 執行後，會顯示下面的資訊，密碼就是第一次啟動 Jenkins 在用的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ... logging ... ************************************************************* ************************************************************* ************************************************************* Jenkins initial setup is required. An admin user has been created and a password generated. Please use the following password to proceed to installation: 61e8c8cb00c0417bb4c4719ba8559060 This may also be found at: /var/jenkins_home/secrets/initialAdminPassword ************************************************************* ************************************************************* ************************************************************* 先複製 61e8c8cb00c0417bb4c4719ba8559060\n如果不小心加上 -d 後，該怎麼辦 ?\n可以參考 備註\n前往網頁 就把 61e8c8cb00c0417bb4c4719ba8559060 貼進去裡面就完成啟用囉 !\n不安裝任何插件 直接點擊右上角 x, 到時候我們再一項一項安裝.\n進入首頁 更改 admin 密碼 建立一個 work Hello Jenkins 這邊可以直接按「OK」。\n加入一個 echo shell 畢竟本篇是要執行一個 echo 「Hello World」。\n所以我們還是先照做，此篇只是第一篇的 jenkins XD\n點擊儲存。\n執行我們建立的作業 Hello Jenkins 1 2 3 點擊我們 Hello Jenkins 作業做右邊的執行鈕 重整頁面 (F5) 接者會發現「上次執行成功時間」、「上次建置花費時間」已經有數值，不會像圖片上顯示「無」 我們現在去看看我們執行的結果\n1 2 點擊「Hello Jenkins」名稱，進入頁面後。 目光移到「左下角」的「建置歷程」 這邊我點擊 #1 來看看我們，剛剛的 Hello Jenkins 有沒有執行出來 !!\n這邊只是大致上介紹一下，Jenkins 可以協助你啟動任何的任務，不只是 Shell.\n未來我還會再增加一些 Jenkins 的範例，希望這篇有幫助到你 !\n結束，今天我們就將 Jenkins 架設完成囉 備註 - 沒有密碼時的步驟 查看 docker 目前執行的 container 1 2 3 # docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d9146583cb09 jenkins/jenkins:lts-jdk11 \u0026#34;/sbin/tini -- /usr/…\u0026#34; 4 minutes ago Up 34 seconds 0.0.0.0:8080-\u0026gt;8080/tcp, :::8080-\u0026gt;8080/tcp, 0.0.0.0:50000-\u0026gt;50000/tcp, :::50000-\u0026gt;50000/tcp jenkins 進入 container 1 2 3 4 # docker exec -it d9146583cb09 /bin/bash jenkins@d9146583cb09:/$ cat /var/jenkins_home/secrets/initialAdminPassword 61e8c8cb00c0417bb4c4719ba8559060 接下來就可以看到密碼囉， 61e8c8cb00c0417bb4c4719ba8559060\n","date":"2022-04-10T19:03:00+08:00","permalink":"/p/jenkins-01-deploy/","title":"JenKins 架設紀錄 01 - 使用 Docker 架設 Jenkins 並第一次使用"},{"content":"目前信用卡/金融卡 1 2 3 目前有以下的信用卡、銀行。 目前只有想整理台灣信用卡，沒有要講 Crypto.com 那張。 台新銀行 一定要自動扣繳 GoGo悠遊御璽信用卡 超過 5000up 5% 每月回饋最多 900 元 街口聯名卡 超過 5000 up 6% 回饋最多 200 元 Richart 金融卡 玉山銀行 Ubear 信用卡 - 網購、行動支付 3% 上限消費一萬台幣 每月回饋最多 200 元 Pi 拍兔簽帳金融卡 - PChome 5% 每月回饋最多 300 元 國泰銀行 Cube 信用卡 - iRent 3% 連線銀行(Line Bank) 活存 - 口袋帳戶 2.2% 上限活存五萬台幣 快點卡 - 全通路 2% 上限消費一萬台幣 Crypto.com 加密貨幣金融卡 中華郵政 Bankee - 活存 - 2.6% 上限活存五萬台幣 說明 1 2 3 本篇沒有算台新新卡友，如果是新卡友就不要繼續看了。 因為我是舊卡友。 今天也只打算整理台新的信用卡 ..\n超失望，第一張 GOGO 卡現在變成這樣 .. QQ\n台新 今年 2022 年，若有大筆才會使用, 畢竟分期還有回饋的銀行。\nGoGo悠遊御璽信用卡 帳單期限：2022/4/1~2023/1/31 的結帳帳單\n連結：https://www.taishinbank.com.tw/TSB/personal/credit/intro/overview/future/86ba4c75-a85a-11e9-95ab-0050568c09e3\n無腦用法：\n1 2 3 一定要使用 LINE PAY 當月必須消費 5000 元以上 (分期當月超過 5000 元也算) 使用 Richart 自動扣繳信用卡帳單 非無腦用法：\n這邊有個重點，連結有一張大表。分為「精選」4.8%、「指定」3.3%、「一般」0.8%。\n三個回饋上限各為 300 元台幣，意思是說同期可以最高有 900 元回饋。\n街口聯名卡 帳單期限：2022/1/1~2022/6/30 的結帳帳單\n每月上限：200元\n連結：https://www.taishinbank.com.tw/TSB/personal/credit/intro/overview/future/fb892ea1-f967-11e9-b038-0050568c09e3\n無腦用法：\n1 2 A 用法 6%: 禮拜三使用街口繳```中華電信電話費``` 1 2 B 用法 6%: 當月必須消費 5000 元以上 / 分期也可以、含繳費(A用法) Richart 金融卡 1 金融卡就不要奢求什麼了 XD ..｀ 連結：https://richart.tw/TSDIB_RichartWeb/Products/VisaDebitCard\nReference LOGO https://zh.pngtree.com/freepng/hand-drawn-cartoon-credit-card-png-element_4393806.html\n","date":"2022-03-31T18:50:00+08:00","permalink":"/p/2022-credit-card/","title":"2022年04月 - 個人信用卡整理 - 台新銀行"},{"content":"更換成 Hugo 的原因 自己本身是有使用 Blogger，主要認為有下面幾個問題。\n垃圾留言 介面很醜 發文介面使用不易 每次發文之後都會跑版，所以果斷使用一個自己架設的。 不想一直預覽切來切去。 不能使用 markdown 方式來撰寫你想要的文章 *** 更換過程 我認為官方的文件講得很清楚，我也是照者下面的連結馬上建立一個 quickstart 資料夾。\nhttps://gohugo.io/getting-started/quick-start/\n然後使用一個官方預設的 Theme (佈景主題?)\n但我自己設定時候講想說「好醜」、「這什麼鬼主題」XD\n所以現在看到的這個主題呢，是從官方(下面連結)找到的。\nhttps://themes.gohugo.io/\n我選的背景主題 https://themes.gohugo.io/themes/hugo-theme-stack/\n底下有中文文檔，不過我還是中英文互相看，英文的文件我認為比較新。\n建議可以直接看英文啦，反正就看一下 config.yml 怎麼設定。\n1 config.yml 底下有檔案連結可以過去參考看看。 架設環境 主要有三個地方需要注意，以下是說明。\nReference 都有我參考的文章，關於 Reference 第 2 點的參考文章建立的 main.yml 是無法執行的。(我的 branch(gh-pages) 一直沒有建立出 HTML)\n.github/workflows/main.yml\n檔案連結： https://github.com/CHunYenc/chunyenc.github.io/blob/f9482b47d8c1e19b6015df92ba0c9007ff7631bc/.github/workflows/main.yml config.yml\n檔案連結： https://github.com/CHunYenc/chunyenc.github.io/blob/f9482b47d8c1e19b6015df92ba0c9007ff7631bc/config.yml 在 config.yml 加入 publishDir: docs, 可以讓你每次下 hugo -t stack 都能夠生成 HTML 檔案到 docs 資料夾, 預設是到 public 資料夾 docs/\n1 2 3 4 5 如果你有看到 Reference 第 1 點的參考文章使用兩個 repository, 一個是主要去紀錄尚未生成的檔案, 一個是生成的靜態檔案(就是指 HTML 放的位置)。 但是我不用，我只需要一個 repository !!! 以下是我準備將網站上線的過程，但是要注意你的上面前兩點都已經設定好 💪\n👉 請確定已經將文章內容打好並且儲存後再執行\n👉 請確定已經將文章內容打好並且儲存後再執行。\n👉 請確定已經將文章內容打好並且儲存後再執行\n1 2 3 4 5 6 hugo -t stack # 這時候會發現我們的 docs 資料夾內會有很多靜態檔案 git add . git commit -m \u0026#34;feat: ...\u0026#34; git push 這樣你等一下就可以在你的網頁上看到了！\nReference https://medium.com/@chswei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40 https://yurepo.tw/2021/03/%E5%A6%82%E4%BD%95%E5%B0%87hugo%E9%83%A8%E8%90%BD%E6%A0%BC%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A/ ","date":"2022-03-26T20:46:00+08:00","permalink":"/p/hugo-blog-online/","title":"我的第一篇 HUGO 架設 BLOG 經驗分享"},{"content":"說明 不廢話，先說明一下為什麼會碰到這個問題，實際原因不太了解。真的對網路只是微懂。\n而本篇主要是記錄這問題是如何解決的，並從哪裡得到這些資訊及解決方式。\n機型：ZYXEL NBG6604\n原因 主要是因為在設定家裡網路時，發現抓不到網路印表機，\n因為印表機在不同網域底下（直插光纖小烏龜）目前則是無法達到讓 WIFI 能夠列印，\n所以將分享器從「路由器模式」切換成「基地台模式」。\n但是這邊發生一點小插曲，就是更改成「基地台模式（Access Point Model）」，\n我無法使用 http://myrouter 進入管理員頁面。\n這個時候只要用網路線/WIFI的方式連線上分享器，使用電腦更改連線IP，以下為我的設定\nIP（IP Address）：192.168.1.254\n子網路遮罩（Subnet mask）：255.255.255.0\n路由器（Default Gateway）：192.168.1.2\nGateway 的 IP 在更改 AP模式（Access Point Model） 時有跳出來，請記錄下來。\n大致上這樣連線 http://192.168.1.2 既可以進入到設定頁面了！\n參考影片：ACCESS POINT Mode on ZyXEL Wireless router | NETVN - YouTube\n","date":"2021-11-27T14:22:00Z","permalink":"/p/zyxel-nbg6604-access-point-model-connect-to-admin-page/","title":"ZYXEL NBG6604 Access Point Model 使用基地台模式連接到管理員/設定頁面"},{"content":"圖片來源：https://zh.wikipedia.org/wiki/Microsoft_SQL_Server\n前言 說明一下為什麼會使用到 SQL Server + Macbook Air。\n主要是在今年 (2021) 年初買了 Macbook Air M1。\n那過了近半年，在目前工作的專案下，對方有提出一個需求就是需要導入 SQL Server，\n就想說試試看 M1 是否可以建立 SQL Server 的環境。\n本文章分為四段 檢查您的電腦是否有安裝 Docker Docker run 使用 dbeaver 開源資料庫管理工具連線 SQL Server Container 結束 本文開始 檢查是否安裝 Docker 合理來說 Macbook Pro 一樣可以參考下面範例，若不行，希望你能留言告訴大家\n首先當然先確認電腦是否有安裝 Docker，這邊顯示一下我目前 Docker 的版本\n指令：\n1 Docker -v 未安裝的話這邊提供一下 Docker 官方網站：\nhttps://docs.docker.com/docker-for-mac/install/\n暫時不提供安裝教學，官方也寫得非常清楚。\nDocker run 這邊其實當初也找了非常多，最後在\nhttps://medium.com/geekculture/docker-express-running-a-local-sql-server-on-your-m1-mac-8bbc22c49dc9\n這篇有發現如何在 M1 安裝 SQL Server，其中他有 Highlight 這一段：\n1 docker run -e \u0026#34;ACCEPT_EULA=1\u0026#34; -e \u0026#34;MSSQL_SA_PASSWORD=MyPass@word\u0026#34; -e \u0026#34;MSSQL_PID=Developer\u0026#34; -e \u0026#34;MSSQL_USER=SA\u0026#34; -p 1433:1433 -d --name=sql mcr.microsoft.com/azure-sql-edge 你如果對 Docker 不是很熟的話，這邊稍微介紹一下當中的用法：\ndocker run：建立一個 container，而 run 後面的意思下面會依序介紹：\n-e：設定環境變數，這邊設定了四個。(環境變數可以參考微軟官方）： https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-configure-environment-variables?view=sql-server-ver15\nACCEPT_EULA：使用者授權\nMSSQL_SA_PASSWORD：SA 資料庫密碼\nMSSQL_PID：設定 SQL Server 版本或產品金鑰，請參考上面官方連結\nMSSQL_USER：使用者名稱\n-p 1433:1433：這邊指的是 host 1433 port 就是等於這個 Container 1433 port (host:container 的意思)\n-d：背景執行\n--name：container 的名稱，這邊設定 sql\nmcr.microsoft.com/azure-sql-edge：就是我們要建立的 image\n以上是指令的介紹，那我再分享一下我的 dock run 的指令好了，來一個範例版。\n1 docker run -e \u0026#34;ACCEPT_EULA=1\u0026#34; -e \u0026#34;MSSQL_SA_PASSWORD=20210807Chunyen\u0026#34; -e \u0026#34;MSSQL_PID=Developer\u0026#34; -e \u0026#34;MSSQL_USER=SA\u0026#34; -p 1433:1433 --name=sqlserver mcr.microsoft.com/azure-sql-edge 這邊我更動了兩個環境配置。\n移除 -d：我先看看我們的設定是否有問題，因為密碼不能太簡單 更改 MSSQL_SA_PASSWORD：設定成自己想要的密碼 首次安裝他需要安裝 image，這邊我們等他一下。\n正在下載 image \u0026ldquo;mcr.microsoft.com/azure-sql-edge\u0026rdquo;\n安裝完後，因為我們是直接 docker run，不是 docker pull。\nDocker pull 的指令為下載 image，詳細可以 Google，這邊不介紹此指令。\n接下來出現這個畫面後，沒有跑出任何 Error，我們就可以打開 dbeaver (開源資料庫管理工具)\n使用 dbeaver 開源資料庫管理工具連線 SQL Server Container 這邊就不展示如何安裝 dbeaver。\n首先我們先打開 dbeaver，如下圖進行新增連線\ndbeaver 建立連線\n建立連線後點擊 Next，輸入連線資訊。\ndbeaver 連線 SQL Server\n先輸入以下資訊：\nHost： localhost Port：1433 Database：master 再輸入\nUser name：sa Password：20210807Chunyen （我上面預設的） 輸入完畢點擊 Test Connection 跳出 Connection Test 視窗。 點擊 OK 再點擊 Finish. 接下來 dbeaver 就會連線到你在上面使用 Docker 建立的 SQL Server 囉！\n結束 本篇結束，已經連到 SQL Server !!!\n可以連線後，就可以繼續做工作的事情囉！\n祝福讀完文章的你，一路順風 XD\n如果你有碰到任何問題，歡迎你在下面留言！\n","date":"2021-08-07T21:10:00Z","image":"/images/SQLServer2008Logo.jpeg","permalink":"/p/macbook-air-m1-install-sql-server/","title":"【Docker】Macbook Air M1 CPU 使用 Docker 建立 SQL Server"},{"content":"前言 如標題，最近正從 C 語言 進階到 C++ 時，\n在 C 語言 學習過程中使用的 Dev-C++ 也隨之陪伴我到 C++，\n但是最近碰到了一件事，就是 cout 中文字時，會跑出亂碼。\n應該要印出 \u0026ldquo;是字元\u0026rdquo; 才對。\n不過不知道為什麼查詢到這個問題的結果蠻少的，\n大部分都說 Dev-C++ 因停止開發了，所以趕快換IDE。\n所以打這篇文就來解決一下吧！\n解決流程 Win+R (Alt+Ctrl 中間的) 進入到 執行 輸入 CMD (命令提示元) 對標題列按右鍵 點選預設值 進入主控台視窗 打勾 使用舊版主控台 對標題列按右鍵： 進入主控台視窗 預設： 將 使用舊版主控台 打勾 ，我電腦不會自動重開機，所以請放心。 預設設定 更改後設定 記得點擊確定。\n再次確認有無 Dev-C++ 亂碼 來看看程式碼，再次執行就會發現已經沒問題囉！\n完成！\n","date":"2019-01-16T23:22:00Z","permalink":"/p/how-to-fix-dev-cpp-garbled/","title":"【BUG】當 DevC++ 亂碼，如何解決呢？"}]